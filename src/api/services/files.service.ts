/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { filesControllerBucketsList } from '../fn/files/files-controller-buckets-list';
import { FilesControllerBucketsList$Params } from '../fn/files/files-controller-buckets-list';
import { filesControllerGetFile } from '../fn/files/files-controller-get-file';
import { FilesControllerGetFile$Params } from '../fn/files/files-controller-get-file';
import { filesControllerUploadFile } from '../fn/files/files-controller-upload-file';
import { FilesControllerUploadFile$Params } from '../fn/files/files-controller-upload-file';

@Injectable({ providedIn: 'root' })
export class FilesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `filesControllerBucketsList()` */
  static readonly FilesControllerBucketsListPath = '/files/buckets';

  /**
   * List all buckets.
   *
   * Returns a list of all available MinIO buckets
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `filesControllerBucketsList()` instead.
   *
   * This method doesn't expect any request body.
   */
  filesControllerBucketsList$Response(params?: FilesControllerBucketsList$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return filesControllerBucketsList(this.http, this.rootUrl, params, context);
  }

  /**
   * List all buckets.
   *
   * Returns a list of all available MinIO buckets
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `filesControllerBucketsList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  filesControllerBucketsList(params?: FilesControllerBucketsList$Params, context?: HttpContext): Observable<void> {
    return this.filesControllerBucketsList$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `filesControllerGetFile()` */
  static readonly FilesControllerGetFilePath = '/files/file-url/{name}';

  /**
   * Get file URL.
   *
   * Returns a presigned URL to access a specific file
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `filesControllerGetFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  filesControllerGetFile$Response(params: FilesControllerGetFile$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return filesControllerGetFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Get file URL.
   *
   * Returns a presigned URL to access a specific file
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `filesControllerGetFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  filesControllerGetFile(params: FilesControllerGetFile$Params, context?: HttpContext): Observable<void> {
    return this.filesControllerGetFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `filesControllerUploadFile()` */
  static readonly FilesControllerUploadFilePath = '/files/upload';

  /**
   * Upload a file.
   *
   * Upload a file to MinIO storage
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `filesControllerUploadFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  filesControllerUploadFile$Response(params: FilesControllerUploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<{

/**
 * Original filename
 */
'filename'?: string;

/**
 * File size in bytes
 */
'size'?: number;

/**
 * URL to access the uploaded file
 */
'url'?: string;
}>> {
    return filesControllerUploadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * Upload a file.
   *
   * Upload a file to MinIO storage
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `filesControllerUploadFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  filesControllerUploadFile(params: FilesControllerUploadFile$Params, context?: HttpContext): Observable<{

/**
 * Original filename
 */
'filename'?: string;

/**
 * File size in bytes
 */
'size'?: number;

/**
 * URL to access the uploaded file
 */
'url'?: string;
}> {
    return this.filesControllerUploadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<{

/**
 * Original filename
 */
'filename'?: string;

/**
 * File size in bytes
 */
'size'?: number;

/**
 * URL to access the uploaded file
 */
'url'?: string;
}>): {

/**
 * Original filename
 */
'filename'?: string;

/**
 * File size in bytes
 */
'size'?: number;

/**
 * URL to access the uploaded file
 */
'url'?: string;
} => r.body)
    );
  }

}
