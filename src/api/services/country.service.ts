/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { countryControllerCreate } from '../fn/country/country-controller-create';
import { CountryControllerCreate$Params } from '../fn/country/country-controller-create';
import { countryControllerFindAll } from '../fn/country/country-controller-find-all';
import { CountryControllerFindAll$Params } from '../fn/country/country-controller-find-all';
import { countryControllerFindByCode } from '../fn/country/country-controller-find-by-code';
import { CountryControllerFindByCode$Params } from '../fn/country/country-controller-find-by-code';
import { countryControllerGetQuestions } from '../fn/country/country-controller-get-questions';
import { CountryControllerGetQuestions$Params } from '../fn/country/country-controller-get-questions';

@Injectable({ providedIn: 'root' })
export class CountryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `countryControllerFindAll()` */
  static readonly CountryControllerFindAllPath = '/countries';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countryControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  countryControllerFindAll$Response(params?: CountryControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return countryControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countryControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countryControllerFindAll(params?: CountryControllerFindAll$Params, context?: HttpContext): Observable<void> {
    return this.countryControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `countryControllerCreate()` */
  static readonly CountryControllerCreatePath = '/countries';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countryControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  countryControllerCreate$Response(params: CountryControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return countryControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countryControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  countryControllerCreate(params: CountryControllerCreate$Params, context?: HttpContext): Observable<void> {
    return this.countryControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `countryControllerGetQuestions()` */
  static readonly CountryControllerGetQuestionsPath = '/countries/questions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countryControllerGetQuestions()` instead.
   *
   * This method doesn't expect any request body.
   */
  countryControllerGetQuestions$Response(params?: CountryControllerGetQuestions$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return countryControllerGetQuestions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countryControllerGetQuestions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countryControllerGetQuestions(params?: CountryControllerGetQuestions$Params, context?: HttpContext): Observable<void> {
    return this.countryControllerGetQuestions$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `countryControllerFindByCode()` */
  static readonly CountryControllerFindByCodePath = '/countries/{code}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countryControllerFindByCode()` instead.
   *
   * This method doesn't expect any request body.
   */
  countryControllerFindByCode$Response(params: CountryControllerFindByCode$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return countryControllerFindByCode(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countryControllerFindByCode$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countryControllerFindByCode(params: CountryControllerFindByCode$Params, context?: HttpContext): Observable<void> {
    return this.countryControllerFindByCode$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
