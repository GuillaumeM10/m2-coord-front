/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { GameDto } from '../models/game-dto';
import { gamesControllerCreate } from '../fn/games/games-controller-create';
import { GamesControllerCreate$Params } from '../fn/games/games-controller-create';
import { gamesControllerDelete } from '../fn/games/games-controller-delete';
import { GamesControllerDelete$Params } from '../fn/games/games-controller-delete';
import { gamesControllerFindAll } from '../fn/games/games-controller-find-all';
import { GamesControllerFindAll$Params } from '../fn/games/games-controller-find-all';
import { gamesControllerFindOne } from '../fn/games/games-controller-find-one';
import { GamesControllerFindOne$Params } from '../fn/games/games-controller-find-one';

@Injectable({ providedIn: 'root' })
export class GamesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `gamesControllerFindAll()` */
  static readonly GamesControllerFindAllPath = '/games';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `gamesControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  gamesControllerFindAll$Response(params?: GamesControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GameDto>>> {
    return gamesControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `gamesControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  gamesControllerFindAll(params?: GamesControllerFindAll$Params, context?: HttpContext): Observable<Array<GameDto>> {
    return this.gamesControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GameDto>>): Array<GameDto> => r.body)
    );
  }

  /** Path part for operation `gamesControllerCreate()` */
  static readonly GamesControllerCreatePath = '/games';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `gamesControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  gamesControllerCreate$Response(params: GamesControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<GameDto>> {
    return gamesControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `gamesControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  gamesControllerCreate(params: GamesControllerCreate$Params, context?: HttpContext): Observable<GameDto> {
    return this.gamesControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameDto>): GameDto => r.body)
    );
  }

  /** Path part for operation `gamesControllerFindOne()` */
  static readonly GamesControllerFindOnePath = '/games/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `gamesControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  gamesControllerFindOne$Response(params: GamesControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<GameDto>> {
    return gamesControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `gamesControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  gamesControllerFindOne(params: GamesControllerFindOne$Params, context?: HttpContext): Observable<GameDto> {
    return this.gamesControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameDto>): GameDto => r.body)
    );
  }

  /** Path part for operation `gamesControllerDelete()` */
  static readonly GamesControllerDeletePath = '/games/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `gamesControllerDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  gamesControllerDelete$Response(params: GamesControllerDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<GameDto>> {
    return gamesControllerDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `gamesControllerDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  gamesControllerDelete(params: GamesControllerDelete$Params, context?: HttpContext): Observable<GameDto> {
    return this.gamesControllerDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<GameDto>): GameDto => r.body)
    );
  }

}
